diff a/source/mainwin.cc b/source/mainwin.cc	(rejected hunks)
--- a/source/mainwin.cc 
+++ b/source/mainwin.cc
@@ -58,17 +62,17 @@ Mainwin::Mainwin (X_rootwin *parent, X_resman *xres, int xp, int yp, Jclient *jc
         _bnote [i] = new Pbutt1 (this, this, &b_note_img, x, y, i);
         _bnote [i]->set_state (1);
         _bnote [i]->x_map ();
-	if (j == 4) 
-	{
-	    x += 20;
-	    j++;
-	}
-	else
-	{
-	    x += 10;
+        if (j == 4)
+        {
+            x += 20;
+            j++;
+        }
+        else
+        {
+            x += 10;
             if (j & 1) y += 18;
-	    else       y -= 18;
-	} 
+            else       y -= 18;
+        }
     }
     x += 22;
     _bmidi = new Pbutt0 (this, this, &b_midi_img, x, 6, B_MIDI);
@@ -200,58 +204,58 @@ void Mainwin::handle_callb (int type, X_window *W, XEvent *E)
     switch (type)
     {
     case PushButton::PRESS:
-	B = (PushButton *) W;
-	k = B->cbind ();
-	if (k < B_MIDI)
-	{
-	    k = 1 << k;
-	    if (B->state () & 1) _notes |=  k;
-	    else                 _notes &= ~k;
-	    _jclient->set_notemask (_notes);
-	}
-	else if (k == B_MIDI)
-	{
-	    _jclient->clr_midimask ();
-	}
-	break;
+        B = (PushButton *) W;
+        k = B->cbind ();
+        if (k < B_MIDI)
+        {
+            k = 1 << k;
+            if (B->state () & 1) _notes |=  k;
+            else                 _notes &= ~k;
+            _jclient->set_notemask (_notes);
+        }
+        else if (k == B_MIDI)
+        {
+            _jclient->clr_midimask ();
+        }
+        break;
 
     case RotaryCtl::PRESS:
-	R = (RotaryCtl *) W;
-	k = R->cbind ();
-	switch (k)
-	{
+        R = (RotaryCtl *) W;
+        k = R->cbind ();
+        switch (k)
+        {
         case R_TUNE:
         case R_OFFS:
-	    showval (k);
-	    break;
-	}
-	break;
+            showval (k);
+            break;
+        }
+        break;
 
     case RotaryCtl::DELTA:
-	R = (RotaryCtl *) W;
-	k = R->cbind ();
-	switch (k)
-	{
+        R = (RotaryCtl *) W;
+        k = R->cbind ();
+        switch (k)
+        {
         case R_TUNE:
             v = _rotary [R_TUNE]->value ();
             _jclient->retuner ()->set_refpitch (v);
-	    showval (k);
-	    break;
-	case R_BIAS:   
+            showval (k);
+            break;
+        case R_BIAS:
             _jclient->retuner ()->set_notebias (_rotary [R_BIAS]->value ());
-	    break;
-	case R_FILT:   
+            break;
+        case R_FILT:
             _jclient->retuner ()->set_corrfilt (_rotary [R_FILT]->value ());
-	    break;
-	case R_CORR:   
+            break;
+        case R_CORR:
             _jclient->retuner ()->set_corrgain (_rotary [R_CORR]->value ());
-	    break;
-	case R_OFFS:   
+            break;
+        case R_OFFS:
             _jclient->retuner ()->set_corroffs (_rotary [R_OFFS]->value ());
-	    showval (k);
-	    break;
-	}
-	break;
+            showval (k);
+            break;
+        }
+        break;
     }
 }
 
@@ -264,12 +268,12 @@ void Mainwin::showval (int k)
     {
     case R_TUNE:
         sprintf (s, "%5.1lf", _rotary [R_TUNE]->value ());
-	_textln->x_move (222, 58);
-	break;
+        _textln->x_move (222, 58);
+        break;
     case R_OFFS:
         sprintf (s, "%5.2lf", _rotary [R_OFFS]->value ());
-	_textln->x_move (463, 58);
-	break;
+        _textln->x_move (463, 58);
+        break;
     }
     _textln->set_text (s);
     _textln->x_map ();
